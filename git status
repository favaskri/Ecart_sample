warning: LF will be replaced by CRLF in routes/users.js.
The file will have its original line endings in your working directory
[1mdiff --git a/helpers/product-helpers.js b/helpers/product-helpers.js[m
[1mindex d0f3e8a..a8d438c 100644[m
[1m--- a/helpers/product-helpers.js[m
[1m+++ b/helpers/product-helpers.js[m
[36m@@ -2,6 +2,8 @@[m [mvar db = require('../cofig/connection')[m
 var collection = require('../cofig/collections')[m
 var objectId = require('mongodb').ObjectID[m
 const collections = require('../cofig/collections')[m
[32m+[m
[32m+[m
 const { response } = require('express')[m
 module.exports = {[m
     addProduct: (product, callback) => {[m
[36m@@ -36,16 +38,17 @@[m [mmodule.exports = {[m
     updateProduct: (proId, proDetails) => {[m
         return new Promise((resolve, reject) => {[m
             db.get().collection(collection.PRODUCT_COLLECTIONS).updateOne({ _id: objectId(proId) }, {[m
[31m-                $set    :{[m
[31m-                product_name: proDetails.product_name,[m
[31m-                product_name_fr: proDetails.product_name_fr,[m
[31m-                product_weight: proDetails.product_weight,[m
[31m-                product_price: proDetails.product_price[m
[32m+[m[32m                $set: {[m
[32m+[m[32m                    product_name: proDetails.product_name,[m
[32m+[m[32m                    product_name_fr: proDetails.product_name_fr,[m
[32m+[m[32m                    product_weight: proDetails.product_weight,[m
[32m+[m[32m                    product_price: proDetails.product_price[m
                 }[m
[31m-                [m
[31m-            }).then((response)=>{[m
[32m+[m
[32m+[m[32m            }).then((response) => {[m
                 resolve()[m
             })[m
         })[m
     }[m
[32m+[m[41m   [m
 }[m
\ No newline at end of file[m
[1mdiff --git a/helpers/user-helpers.js b/helpers/user-helpers.js[m
[1mindex e5d5653..feb5dfd 100644[m
[1m--- a/helpers/user-helpers.js[m
[1m+++ b/helpers/user-helpers.js[m
[36m@@ -24,36 +24,75 @@[m [mmodule.exports = {[m
                 bcrypt.compare(userData.password, user.password).then((status) => {[m
                     if (status) {[m
                         console.log('login success');[m
[31m-                        response.user=user[m
[31m-                        response.status=true[m
[32m+[m[32m                        response.user = user[m
[32m+[m[32m                        response.status = true[m
                         resolve(response)[m
                     } else {[m
                         console.log('login faile')[m
[31m-                        resolve({status:false})[m
[32m+[m[32m                        resolve({ status: false })[m
                     }[m
                 })[m
[31m-            }else{[m
[32m+[m[32m            } else {[m
                 console.log('email id not exist')[m
[31m-                resolve({status:false})[m
[32m+[m[32m                resolve({ status: false })[m
             }[m
         })[m
     },[m
[31m-    addToCart:(proId,userId)=>{[m
[31m-        return new Promise(async(resolve,reject)=>{[m
[31m-            let userCart=await db.get().collection(collection.CART_COLLECTION).findOne({user:objectId(userId)})[m
[31m-            if(userCart){[m
[32m+[m[32m    addToCart: (proId, userId) => {[m
[32m+[m[32m        return new Promise(async (resolve, reject) => {[m
[32m+[m[32m            let userCart = await db.get().collection(collection.CART_COLLECTION).findOne({ user: objectId(userId) })[m
[32m+[m[32m            if (userCart) {[m
[32m+[m[32m                db.get().collection(collection.CART_COLLECTION).updateOne({ user: objectId(proId) },[m
[32m+[m[32m                    {[m
[32m+[m[41m                        [m
[32m+[m[32m                            $push: { products:objectId(proId) }[m
[32m+[m[41m                        [m
[32m+[m
[32m+[m[32m                    }).then((response) => {[m
[32m+[m[32m                        resolve()[m
[32m+[m[32m                    })[m
 [m
[31m-            }else{[m
[31m-                let cartObj={[m
[31m-                   user:objectId(userId),[m
[31m-                   products:[objectId(proId)][m
[32m+[m[32m            } else {[m
[32m+[m[32m                let cartObj = {[m
[32m+[m[32m                    user: objectId(userId),[m
[32m+[m[32m                    products: [objectId(proId)][m
 [m
                 }[m
[31m-                db.get().collection(collection.CART_COLLECTION).insertOne(cartObj).then((response)=>{[m
[32m+[m[32m                db.get().collection(collection.CART_COLLECTION).insertOne(cartObj).then((response) => {[m
                     resolve()[m
                 })[m
             }[m
 [m
         })[m
[32m+[m[32m    },[m
[32m+[m[32m    getCartProducts: (userId) => {[m
[32m+[m[32m        return new Promise(async (resolve, reject) => {[m
[32m+[m[32m            let cartItems = await db.get().collection(collection.CART_COLLECTION).aggregate([[m
[32m+[m[32m                {[m
[32m+[m[32m                    $match: { user: objectId(userId) }[m
[32m+[m[32m                }, {[m
[32m+[m[32m                    $lookup: {[m
[32m+[m[32m                        from:collection.PRODUCT_COLLECTIONS,[m
[32m+[m[32m                        let: { prodList: '$products' },[m
[32m+[m[32m                        pipeline: [[m
[32m+[m[32m                            {[m
[32m+[m[32m                                $match: {[m
[32m+[m[32m                                    $expr: {[m
[32m+[m[32m                                        $in: ['$_id', '$$prodList'[m
[32m+[m
[32m+[m[32m                                        ][m
[32m+[m[32m                                    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m                                }[m
[32m+[m[32m                            }[m
[32m+[m[32m                        ], as: 'cartItems'[m
[32m+[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            ]).toArray()[m
[32m+[m[32m            resolve(cartItems)[m
[32m+[m[32m        })[m
     }[m
 }[m
[1mdiff --git a/routes/users.js b/routes/users.js[m
[1mindex 4fc8622..8208913 100644[m
[1m--- a/routes/users.js[m
[1m+++ b/routes/users.js[m
[36m@@ -1,4 +1,5 @@[m
 var express = require('express');[m
[32m+[m[32mconst session = require('express-session');[m
 var router = express.Router();[m
 var productHelpers = require('../helpers/product-helpers');[m
 const { doSignup } = require('../helpers/user-helpers');[m
[36m@@ -58,7 +59,11 @@[m [mrouter.get('/logout', (req, res) => {[m
   req.session.destroy()[m
   res.redirect('/')[m
 })[m
[31m-router.get('/cart',verifyLogin,(req,res)=>{[m
[32m+[m[32mrouter.get('/cart',verifyLogin,async(req,res)=>{[m
[32m+[m[32m  let products= await userHelpers.getCartProducts(req.session.user._id)[m
[32m+[m[41m [m
[32m+[m[32m  console.log(products)[m
[32m+[m
   res.render('user/cart')[m
 })[m
 router.get('/add-to-cart/:id',verifyLogin,(req,res)=>{[m
